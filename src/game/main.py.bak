# -*- coding: utf-8 -*-
"""
PF2E Grid Combat - Main game module
"""
import pygame
import sys
from typing import List, Dict, Any, Optional, Tuple

from src.entities.base_character import BaseCharacter
from src.entities.characters import Fighter, Rogue, Wizard, Enemy
from src.entities.grid_position import GridPosition
from src.entities.effect import Effect
from src.ui.screens import (
    Screen, IntroScreen, ClassSelectScreen, UpgradeScreen,
    WaveConfirmationScreen, EndGameScreen
)
from src.constants.game_constants import (
    WINDOW_WIDTH, WINDOW_HEIGHT, GRID_SIZE, GRID_COLS, GRID_ROWS,
    BACKGROUND_COLOR, GRID_COLOR, GRID_HIGHLIGHT,
    TEXT_COLOR, BUTTON_COLOR,
    FONT, TITLE_FONT
)

class Game:
    """Main game class handling game state and logic"""
    def __init__(self):
        pygame.init()
        pygame.font.init()
        
        # Set up display
        self.screen = pygame.display.set_mode((WINDOW_WIDTH, WINDOW_HEIGHT))
        pygame.display.set_caption("PF2E Grid Combat")
        self.clock = pygame.time.Clock()
        
        # Initialize game state
        self.state = "intro"  # intro, class_select, combat, upgrade, wave_complete, victory, game_over
        self.party: List[BaseCharacter] = []
        self.enemies: List[Enemy] = []
        self.current_wave = 0
        self.current_member_idx = 0
        self.actions_left = 3
        self.selected_character: Optional[BaseCharacter] = None
        self.selected_target: Optional[BaseCharacter] = None
        self.highlighted_squares: List[GridPosition] = []
        self.combat_log: List[str] = []
        self.scroll_offset = 0
        self.wave_summary: Optional[Dict[str, Any]] = None
        self.upgrade_selection: Optional[str] = None
        self.available_upgrades = ["Accuracy", "Damage", "Speed", "Vitality"]
        
        # Set up screens
        self.screens: Dict[str, Screen] = {
            "intro": IntroScreen(self),
            "class_select": ClassSelectScreen(self),
            "upgrade": UpgradeScreen(self),
            "wave_complete": WaveConfirmationScreen(self),
            "victory": EndGameScreen(self),
            "game_over": EndGameScreen(self)
        }
        
        # Set up effects
        self.active_effects: List[Effect] = [] 